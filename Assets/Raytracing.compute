// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Sphere {
    float3 position;
    float radius;
    float3 colour;
    float emissive;
};

float kc;
float kl;
float kq;

RWStructuredBuffer<Sphere> spheres;
RWTexture2D<float4> Result;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
static const float PI = 3.14159265f;

struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
};

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1, 1, 1);
    return ray;
}

struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
    float3 colour;
    float3 emissive;
};

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    return hit;
}

Ray CreateCameraRay(float2 uv)
{
    // Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0, 0.0, 0.0, 1.0f)).xyz;

    // Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
    // Calculate distance along the ray where the ground plane is intersected
    float t = -ray.origin.y / ray.direction.y;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
        bestHit.colour = float3(0.2f, 0.2f, 0.2f);
        bestHit.emissive = 0;
    }
}

void IntersectSphere(Ray ray, inout RayHit bestHit, uint i)
{
    float4 sphere = float4(spheres[i].position, spheres[i].radius);
    // Calculate distance along the ray where the sphere is intersected
    float3 d = ray.origin - sphere.xyz;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.w * sphere.w;
    if (p2sqr < 0)
        return;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.xyz);
        bestHit.colour = spheres[i].colour;
        if (any(spheres[i].emissive)) {
            bestHit.emissive = spheres[i].colour * (spheres[i].emissive - 1.5f);
        }
        else {
            bestHit.emissive = 0;
        }
    }
}

RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();
    IntersectGroundPlane(ray, bestHit);
    uint count;
    uint stride;
    spheres.GetDimensions(count, stride);
    for (uint i = 0; i < count; i++) {
        IntersectSphere(ray, bestHit, i);
    }
    return bestHit;
}

float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.distance < 1.#INF)
    {
        // iterate through all emissive balls, sum light
        float3 light;
        float3 position = hit.position + hit.normal * 0.001f;
        uint count;
        uint stride;
        spheres.GetDimensions(count, stride);
        for (uint i = 0; i < count; i++) {
            if (spheres[i].emissive > 0) {
                Sphere sphere;
                Ray sphereRay = CreateRay(position, normalize(spheres[i].position - position));
                RayHit emissiveHit = Trace(sphereRay);
                float3 sphereDistance = spheres[i].position - hit.position;
                if (distance(spheres[i].position, hit.position) < pow(abs(spheres[i].emissive * 2), 2)) {
                    if (any(emissiveHit.emissive) && all(emissiveHit.colour == spheres[i].colour)) {
                        float lightDistance = emissiveHit.distance;
                        float3 diffuseAngle = dot(sphereRay.direction, hit.normal) / length(sphereRay.direction) * length(hit.normal);
                        float3 inverseSquareLaw = kc + kl * lightDistance + kq * lightDistance * lightDistance;
                        light += emissiveHit.emissive * hit.colour * diffuseAngle / inverseSquareLaw;
                    }
                }
            }
        }
        // Return colour
        return light;
    }
    else
    {
        ray.energy = float3(0, 0, 0);

        // Sample the skybox and write it
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        //return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
        return float3(0, 0, 0);
    }
}

[numthreads(32,32,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);
    // Transform pixel to [-1,1] range
    float2 uv = float2((id.xy + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);
    // Get a ray for the UVs
    Ray ray = CreateCameraRay(uv);
    // Trace and shade
    float3 result = float3(0, 0, 0);
    RayHit hit = Trace(ray);
    if (any(hit.emissive)) {
        result = hit.colour;
    }
    else {
        result = Shade(ray, hit);
    }
    Result[id.xy] = float4(result, 1);
}