// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Sphere {
    float3 position;
    float radius;
    float3 colour;
    float specularity;
};

float3 lightPos;
float lightIntensity;
float3 ambientLight;
float3 diffuseLight;
float3 specularLight;
float kc;
float kl;
float kq;

RWStructuredBuffer<Sphere> spheres;
RWTexture2D<float4> Result;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
static const float PI = 3.14159265f;

struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
};

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1, 1, 1);
    return ray;
}

struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
    float3 colour;
    float specular;
};

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    return hit;
}

Ray CreateCameraRay(float2 uv)
{
    // Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0, 0.0, 0.0, 1.0f)).xyz;

    // Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
    // Calculate distance along the ray where the ground plane is intersected
    float t = -ray.origin.y / ray.direction.y;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
        bestHit.colour = float3(0.2f, 0.2f, 0.2f);
        bestHit.specular = 0;
    }
}

void IntersectSphere(Ray ray, inout RayHit bestHit, uint i)
{
    float4 sphere = float4(spheres[i].position, spheres[i].radius);
    // Calculate distance along the ray where the sphere is intersected
    float3 d = ray.origin - sphere.xyz;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.w * sphere.w;
    if (p2sqr < 0)
        return;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.xyz);
        bestHit.colour = spheres[i].colour;
        bestHit.specular = spheres[i].specularity;
    }
}

RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();
    IntersectGroundPlane(ray, bestHit);
    uint count;
    uint stride;
    spheres.GetDimensions(count, stride);
    for (uint i = 0; i < count; i++) {
        IntersectSphere(ray, bestHit, i);
    }
    return bestHit;
}

float3 phongIllumination(float3 colour, float specularity, float3 position, float3 normal, float3 eye) {
    float3 lightDirection = lightPos - position;
    float3 diffuseAngle = dot(lightDirection, normal) / length(lightDirection) * length(normal);

    float3 halfway = normalize(normalize(lightDirection) + normalize(eye));
    float3 specularAngle = pow(abs(dot(halfway, normal) / length(halfway) * length(normal)), specularity);

    float lightDistance = length(lightDirection);
    float3 inverseSquareLaw = kc + kl * lightDistance + kq * lightDistance * lightDistance;
    return ambientLight * colour + (diffuseLight * diffuseAngle * colour + specularLight * specularAngle) / inverseSquareLaw;
}

float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.distance < 1.#INF)
    {
       //return phongIllumination(hit.colour, hit.specular, hit.position, hit.normal, ray.direction * -1);
        
        // Reflect the ray and multiply energy with specular reflection
        ray.origin = hit.position + hit.normal * 0.001f;
        ray.direction = reflect(ray.direction, hit.normal);
        ray.energy *= 0;

        // Shadow test ray
        float3 position = hit.position + hit.normal * 0.001f;
        Ray shadowRay = CreateRay(position, normalize(lightPos - position));
        //Ray shadowRay = CreateRay(hit.position + hit.normal * 0.001f, normalize(lightPos - hit.position));
        RayHit shadowHit = Trace(shadowRay);
        if (shadowHit.distance < length(lightPos - position))
        {
            return 0;
        }

        // Return colour
        return saturate(dot(hit.normal, normalize(lightPos - hit.position))) * lightIntensity * hit.colour;
    }
    else
    {
        ray.energy = float3(0, 0, 0);

        // Sample the skybox and write it
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        //return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
        return float3(0, 0, 0);
    }
}

[numthreads(16,16,3)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);
    // Transform pixel to [-1,1] range
    float2 uv = float2((id.xy + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);
    // Get a ray for the UVs
    Ray ray = CreateCameraRay(uv);
    // Trace and shade
    float3 result = float3(0, 0, 0);
    for (int i = 0; i < 1; i++)
    {
        RayHit hit = Trace(ray);
        result += ray.energy * Shade(ray, hit);
        if (!any(ray.energy))
            break;
    }
    Result[id.xy] = float4(result, 1);
}